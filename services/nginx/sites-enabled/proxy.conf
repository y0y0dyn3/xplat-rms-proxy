server {
    listen 80;

    # Using nginx variables for upstream addresses to force
    # nginx to re-resolve addresses.
    set $s3_upstream rms-packages.s3.amazonaws.com;
    set $alertlogic_upstream scc.alertlogic.net;
    set $cloudpassage_upstream production.packages.cloudpassage.com;
    set $fortinet_upstream images.fortisiem.fortinet.com;

    proxy_ssl_server_name on;

    # This is a magic IP address that supposedly works in any VPC.
    # If you need to test locally, disable this and enable the next one.
    # resolver 169.254.169.253;
    resolver 8.8.8.8;

    location /health {
      return 200;
      access_log off;
    }

    location /version {
      return 200 "foo";
      access_log off;
      add_header Content-Type text/plain;
    }

    location ~ /(.*)rms.packages.key {
      # /rms.packages.key ===> https://rms-packages.s3.amazonaws.com/rms.packages.key
      # apply rate limiting to this location
      # limit_req zone=one burst=10;

      proxy_pass https://$s3_upstream/rms.packages.key$is_args$args;
      proxy_set_header Host $proxy_host;
      proxy_ssl_name $proxy_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # Note we assume we are behind another load balancer, and are just
      # forwarding a couple headers.
      proxy_set_header X-Real-IP $http_x_real_ip;
      proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    }

    location ~ ^/(crowdstrikev4|rapid7|tanium|temp)/(.*) {
      # /crowdstrikev4/* ===> https://rms-packages.s3.amazonaws.com/crowdstrikev4/*
      # /rapid7/* ===> https://rms-packages.s3.amazonaws.com/rapid7/*
      # /tanium/* ===> https://rms-packages.s3.amazonaws.com/tanium/*
      # /temp/* ===> https://rms-packages.s3.amazonaws.com/temp/*

      # apply rate limiting to this location
      # limit_req zone=one burst=10;

      proxy_pass https://$s3_upstream/$1/$2$is_args$args;
      proxy_set_header Host $proxy_host;
      proxy_ssl_name $proxy_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # Note we assume we are behind another load balancer, and are just
      # forwarding a couple headers.
      proxy_set_header X-Real-IP $http_x_real_ip;
      proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    }

    location ~ ^/alertlogic/(.*) {
      # /alertlogic/* ===> https://scc.alertlogic.net/software/*

      # apply rate limiting to this location
      # limit_req zone=one burst=10;

      proxy_pass https://$alertlogic_upstream/software/$1$is_args$args;
      proxy_set_header Host $proxy_host;
      proxy_ssl_name $proxy_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # Note we assume we are behind another load balancer, and are just
      # forwarding a couple headers.
      proxy_set_header X-Real-IP $http_x_real_ip;
      proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    }

    location ~ ^/cloudpassage/cphalo-LATEST-win(.*) {
      # /cloudpassage/cphalo-LATEST-win64.exe ===> https://production.packages.cloudpassage.com/windows/cphalo-4.2.2-win64.exe

      # apply rate limiting to this location
      # limit_req zone=one burst=10;

      proxy_pass https://$cloudpassage_upstream/windows/cphalo-4.2.2-win$1;
      proxy_set_header Host $proxy_host;
      proxy_ssl_name $proxy_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # Note we assume we are behind another load balancer, and are just
      # forwarding a couple headers.
      proxy_set_header X-Real-IP $http_x_real_ip;
      proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    }

    location ~ ^/cloudpassage/(cloudpassage.packages.key) {
      # /cloudpassage/cloudpassage.packages.key ===> https://production.packages.cloudpassage.com/cloudpassage.packages.key

      # apply rate limiting to this location
      # limit_req zone=one burst=10;

      proxy_pass https://$cloudpassage_upstream/$1;
      proxy_set_header Host $proxy_host;
      proxy_ssl_name $proxy_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # Note we assume we are behind another load balancer, and are just
      # forwarding a couple headers.
      proxy_set_header X-Real-IP $http_x_real_ip;
      proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    }

    location ~ ^/cloudpassage/(debian|redhat)/(.*) {
      # NOTE(kgriffs): We should avoid proxying repo requests unless for some reason the customer
      #   refuses to open a route to packages.cloudpassage.com:443 in their firewall. That way, we
      #   aren't on the critical path each time someone does a yum update.
      #
      # /cloudpassage/debian/* ===> https://production.packages.cloudpassage.com/debian/*
      # /cloudpassage/redhat/* ===> https://production.packages.cloudpassage.com/redhat/*

      # apply rate limiting to this location
      # limit_req zone=one burst=10;

      proxy_pass https://$cloudpassage_upstream/$1/$2;
      proxy_set_header Host $proxy_host;
      proxy_ssl_name $proxy_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # Note we assume we are behind another load balancer, and are just
      # forwarding a couple headers.
      proxy_set_header X-Real-IP $http_x_real_ip;
      proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    }

    location ~ ^/fortisiem/(linux|windows)/(.*) {
      # /fortisiem/linux/* ===> https://images.fortisiem.fortinet.com/pre-release/agent/5.2.3/linux/*
      # /fortisiem/windows/* ===> https://images.fortisiem.fortinet.com/pre-release/agent/5.2.3/windows/*

      proxy_pass https://$fortinet_upstream/pre-release/agent/5.2.4.1636/$1/$2;
      proxy_set_header Host $proxy_host;
      proxy_ssl_name $proxy_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # Note we assume we are behind another load balancer, and are just
      # forwarding a couple headers.
      proxy_set_header X-Real-IP $http_x_real_ip;
      proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    }

}
